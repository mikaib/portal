// Generated by Haxe 4.3.6
#ifndef INCLUDED_portal__Portal
#define INCLUDED_portal__Portal

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_4dbe585c96d08098
#define INCLUDED_4dbe585c96d08098
#include "genesis.h"
#endif
#ifndef INCLUDED_0dc8763c2770302b
#define INCLUDED_0dc8763c2770302b
#include "portal.h"
#endif
HX_DECLARE_CLASS1(portal,_Portal)

namespace portal{


class HXCPP_CLASS_ATTRIBUTES _Portal_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef _Portal_obj OBJ_;
		_Portal_obj();

	public:
		enum { _hx_ClassId = 0x1ef74813 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="portal._Portal")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"portal._Portal"); }

		inline static ::hx::ObjectPtr< _Portal_obj > __new() {
			::hx::ObjectPtr< _Portal_obj > __this = new _Portal_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< _Portal_obj > __alloc(::hx::Ctx *_hx_ctx) {
			_Portal_obj *__this = (_Portal_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(_Portal_obj), false, "portal._Portal"));
			*(void **)__this = _Portal_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~_Portal_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("_Portal",6b,00,31,a0); }

		static ::String getVersionString();

		static  PtConfig * createConfig();

		static void destroyConfig( PtConfig * config);

		static  PtBackend * createBackend( cpp::Struct<PtBackendType> type);

		static void destroyBackend( PtBackend * backend);

		static  cpp::Struct<PtBackendType> getOptimalBackendType();

		static void init( PtConfig * config);

		static  PtWindow * createWindow(::String title,int width,int height);

		static void destroyWindow( PtWindow * window);

		static int shouldWindowClose( PtWindow * window);

		static void swapBuffers( PtWindow * window);

		static void pollEvents( PtWindow * window);

		static int getWindowWidth( PtWindow * window);

		static int getWindowHeight( PtWindow * window);

		static int getFramebufferWidth( PtWindow * window);

		static int getFramebufferHeight( PtWindow * window);

		static int useGLContext( PtWindow * window);

		static int getInputEventCount( PtWindow * window);

		static  PtInputEventData pullInputEvent( PtWindow * window);

		static void shutdown();

};

} // end namespace portal

#endif /* INCLUDED_portal__Portal */ 
