// Generated by Haxe 4.3.3
#ifndef INCLUDED_Main
#define INCLUDED_Main

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_4dbe585c96d08098
#define INCLUDED_4dbe585c96d08098
#include "genesis.h"
#endif
#ifndef INCLUDED_0dc8763c2770302b
#define INCLUDED_0dc8763c2770302b
#include "portal.h"
#endif
HX_DECLARE_CLASS0(Main)



class HXCPP_CLASS_ATTRIBUTES Main_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Main_obj OBJ_;
		Main_obj();

	public:
		enum { _hx_ClassId = 0x07825a7d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Main")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"Main"); }
		static ::hx::ObjectPtr< Main_obj > __new();
		static ::hx::ObjectPtr< Main_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Main_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Main",59,64,2f,33); }

		static void main();
		static ::Dynamic main_dyn();

		::Array< float > vertexData;
		::Array< int > indexData;
		::String vertexShaderSource;
		::String fragmentShaderSource;
		 PtWindow * window;
		 PtConfig * ptConfig;
		 PtBackend * ptBackend;
		 GsBackend * backend;
		 GsConfig * config;
		 GsCommandList * commandList;
		 GsPipeline * pipeline;
		 GsVtxLayout * layout;
		 GsProgram * program;
		 GsShader * vertexShader;
		 GsShader * fragmentShader;
		 GsBuffer * vertexBuffer;
		 GsBuffer * indexBuffer;
		void initWindow();
		::Dynamic initWindow_dyn();

		void destroyWindow();
		::Dynamic destroyWindow_dyn();

		void initGraphics();
		::Dynamic initGraphics_dyn();

		void destroyGraphics();
		::Dynamic destroyGraphics_dyn();

		void frame();
		::Dynamic frame_dyn();

		void loop();
		::Dynamic loop_dyn();

		void init();
		::Dynamic init_dyn();

		void destroy();
		::Dynamic destroy_dyn();

};


#endif /* INCLUDED_Main */ 
